A new rural zero-carbon village is being developed in Oxfordshire, near (51.911685,-1.061467). 160 dwellings, each with 2.8kWp solar and a total ADMD of 3kW You are a consultant required to plan the electrical distribution system. The plan must include a detailed design of the proposed power system to serve the needs of the new town, from the grid to the distribution to the dwellings. You can assume a 132 kV substation is 20 km from the new village.

You may assume that the dwellings can be laid out in a suitable grid formation and must include roads. Please provide a drawing of the layout. The layout of the dwellings may be the same for the group, but the electrical design must be done by each individual. You may assume that the area of each plot of land is 0.25 hectare

1
#import pandapower and numpy libraries
2
import pandapower as pp
3
import pandapower.plotting as pplot
4
import numpy as np
5
​
6
#create empty network
7
net = pp.create_empty_network() 
1
#1= solar and summer max generation
2
#0= no solar and winter max demand
3
#NOTE: first-time use, run once with solar=1 and once solar=0 before analysis
4
solar=1
5
​
6
#set voltages of lines
7
#high voltage (vh) 132kV
8
#medium voltage (vm) 11kV
9
#low voltage (vl) 0.415kV
10
#set shift for visualisation to prevent superimposition of vm and vl
11
​
12
vh=132
13
vm=11
14
vl=0.415
15
shft=2
16
​
17
#set ADMD
18
ADMD = 0.003
19
​
20
#######################################################################################################################
21
​
22
#create buses
23
​
24
#HV bus
25
b0=pp.create_bus(net, vn_kv=vh, name="Bus 0", geodata=(-20,215)) 
26
​
27
if solar==0:
28
    vmpu=1.05
29
else: 
30
    vmpu=0.9
31
        
32
#assign HV bus as slack bus 
33
pp.create_ext_grid(net, bus=b0, vm_pu=vmpu, name="Swing bus")
34
​
35
#MV buses 
36
pp.create_bus(net,vn_kv=vm, name="Bus 1", geodata=((0,215)))
37
​
38
#######################################################################################################################
39
#create transformers
40
​
41
#create trafo between HV and MV
42
#25MVA 132/11kV caluclated in class 
43
#define parameters
44
​
45
sn=1.5 #Rated appearent power MVA
46
vkr=1 #short circuit voltage - real component %
47
vk=10 #short circuit voltage kV
48
pfe=0.25 #iron losses %
49
i0=4 #open loop losses %
50
​
51
pp.create_transformer_from_parameters(net, hv_bus=0, lv_bus=1, sn_mva = sn, vn_hv_kv=vh, vn_lv_kv=vm, vkr_percent = vkr, vk_percent = vk, pfe_kw = pfe, i0_percent = i0, shift_degree=0.05, name ="Trafo 1")
52
​
53
#print(net.bus)
54
​
55
#create buses for trafo between MV and LV
56
for i in range(4):
57
    pp.create_bus(net, vn_kv=vm, name=f"Bus {i+2}", geodata=((0,0))) #MV buses
58
for i in range(4):
59
    pp.create_bus(net, vn_kv=vl, name=f"Bus {i+6}", geodata=((0,0))) #LV buses
60
    
61
#create trafo between MV and LV 
62
#source: https://pandapower.readthedocs.io/en/develop/std_types/basic.html#transformers (0.25 MVA 20/0.4 kV)
63
sn=0.25 #Rated appearent power  MVA 
64
vkr=1.44 #short circuit voltage - real component %
65
vk=6 #short circuit voltage kV
66
pfe=0.8 #iron losses %
67
i0=0.32 #open loop losses %
68
​
69
for i in range(4):
70
    pp.create_transformer_from_parameters(net, shift_degree=0.2,hv_bus=i+2, lv_bus=i+6, sn_mva = sn, vn_hv_kv=vm, vn_lv_kv=vl, vkr_percent = vkr, vk_percent = vk, pfe_kw = pfe, i0_percent = i0,name=f"Trafo {i+2}")   
71
​
72
#######################################################################################################################
73
    
74
#geodata for buses
75
​
76
net.bus_geodata['y'][2,4]=(325-shft)
77
net.bus_geodata['y'][3,5]=(105-shft)
78
net.bus_geodata['y'][6,8]=(325+shft)
79
net.bus_geodata['y'][7,9]=(105+shft)
80
​
81
net.bus_geodata['x'][2,3,6,7]=(250)
82
net.bus_geodata['x'][4,5,8,9]=(700)
83
    
84
#LV buses 
85
for i in range(73):
86
    pp.create_bus(net, vn_kv=vl, name=f"Bus {i+10}", geodata=((0,0)))
87
print(net.bus)
88
    
89
for i in range(5):
90
    net.bus_geodata['y'][i+63,i+73]=(325)
91
    net.bus_geodata['y'][i+68,i+78]=(105)
92
    
93
i=0
94
net.bus_geodata['x'][i+63,i+68]=(50)
95
net.bus_geodata['x'][i+64,i+69]=(100)
96
net.bus_geodata['x'][i+65,i+70]=(200)
97
net.bus_geodata['x'][i+66,i+71]=(350)
98
net.bus_geodata['x'][i+67,i+72]=(400)
99
net.bus_geodata['x'][i+73,i+78]=(550)
100
net.bus_geodata['x'][i+74,i+79]=(650)
101
net.bus_geodata['x'][i+75,i+80]=(800)
102
net.bus_geodata['x'][i+76,i+81]=(850)
103
net.bus_geodata['x'][i+77,i+82]=(950)
104
​
105
for i in range(4):
106
    if i%2==0:
107
        net.bus_geodata['y'][10+13*i,11+13*i,13+13*i,14+13*i,17+13*i,18+13*i,21+13*i]=(380)
108
        net.bus_geodata['y'][12+13*i,15+13*i,16+13*i,19+13*i,20+13*i,22+13*i]=(270)
109
    else:
110
        net.bus_geodata['y'][10+13*i,11+13*i,13+13*i,14+13*i,17+13*i,18+13*i,21+13*i]=(160)
111
        net.bus_geodata['y'][12+13*i,15+13*i,16+13*i,19+13*i,20+13*i,22+13*i, 62]=(50)
112
​
113
for j in range(2):
114
    for i in range (2):
115
        net.bus_geodata['x'][10+13*i+26*j,12+13*i+26*j]=50+500*j
116
        
117
        net.bus_geodata['x'][11+13*i+26*j]=500+550*j
118
        
119
        
120
        net.bus_geodata['x'][13+13*i+26*j,15+13*i+26*j]=100+550*j
121
        net.bus_geodata['x'][14+13*i+26*j,16+13*i+26*j]=400+550*j
122
​
123
        net.bus_geodata['x'][17+13*i+26*j,19+13*i+26*j]=200+500*j
124
        net.bus_geodata['x'][18+13*i+26*j,20+13*i+26*j]=350+500*j
125
    
126
        net.bus_geodata['x'][21+13*i+26*j,22+13*i+26*j]=250+550*j
127
​
128
        #pd.set_option('display.max_rows', 500)      
129
        
130
net.bus_geodata['x'][62]=1000
131
net.bus_geodata['x'][37,50]=500
132
net.bus_geodata['y'][37]=270
133
net.bus_geodata['y'][50]=50
      name    vn_kv type  zone  in_service
0    Bus 0  132.000    b  None        True
1    Bus 1   11.000    b  None        True
2    Bus 2   11.000    b  None        True
3    Bus 3   11.000    b  None        True
4    Bus 4   11.000    b  None        True
..     ...      ...  ...   ...         ...
78  Bus 78    0.415    b  None        True
79  Bus 79    0.415    b  None        True
80  Bus 80    0.415    b  None        True
81  Bus 81    0.415    b  None        True
82  Bus 82    0.415    b  None        True

[83 rows x 5 columns]
1
​
1
#create solar panels
2
#take power factor as 0.9 
3
#define solar calc parameters
4
​
5
eff=0.4843     #q=eff*p
6
cappeak=0.00218 #max solar generation per house per day in summer
7
solareff=1     #solar efficiency- put at 1 to display maximum generation
8
​
9
if solar==1:   #when solar is present
10
    ADMD=0.00183 #ADMD in winter at 3kW - to scale summer ADMD at 1.8kW 
11
    ADMD=ADMD-cappeak*solareff #new load with max solar
12
​
1
#create 160 houses
2
#avg 3 houses per bus (see layout, one group of 4) = 53 
3
 
4
for i in range (53):
5
    if i==30:
6
        pp.create_load(net, bus=i+10, p_mw=ADMD*4, q_mvar=ADMD*4*eff, name=f"Bus 40") #grouping of 4
7
    else: pp.create_load(net, bus=i+10, p_mw=ADMD*3, q_mvar=ADMD*3*eff, name=f"Bus {i+10}")
8
​
1
#create the lines
2
​
3
#Line 1 (HV) not calculated as the substation 20km away is being modelled as the slack bus
4
#parameters would be: pp.create_line_from_parameters(net,from_bus=0, to_bus=1, length_km=20, r_ohm_per_km = 3.56, x_ohm_per_km = 0.0, c_nf_per_km = 1e-9, max_i_ka=1000)
5
​
6
#Line values for medium  voltage lines (11 kV) 
7
#https://www.elandcables.com/media/1460377/power_network_brochure_update_2017.pdf 
8
#WPD 6.35/11 (12)kV Single Core (Triplex) Unarmoured Aluminium Conductors
9
#95mm^2
10
​
11
r_m=0.32
12
x_m=0.117
13
c_f=0.318
14
maxka=0.34
15
​
16
#Line 2-3 (MV-MV)
17
for i in range(2):
18
    if i==0:
19
        pp.create_line_from_parameters(net,from_bus=1, to_bus=i+2, length_km=0.360*1.2, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(0,215),(0,325-shft),(250,325-shft)])
20
    else:
21
        pp.create_line_from_parameters(net,from_bus=1, to_bus=i+2, length_km=0.360*1.2, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(0,215),(0,105-shft),(250,105-shft)])
22
​
23
 #Line 4-5 (MV-MV), 
24
for i in range(2):
25
    pp.create_line_from_parameters(net,from_bus=i+2, to_bus=i+4, length_km=0.5*1.2, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][i+2],net.bus_geodata['y'][i+2]),(net.bus_geodata['x'][i+4],net.bus_geodata['y'][i+4])])
26
    
27
#print(net.line_geodata)
28
    
29
    
30
#Line values for low  voltage lines (0.415 kV) 
31
#line measurement sources
32
#https://www.elandcables.com/media/38530/rz1mz1-k-xlpe-swa-lszh-cable.pdf
33
#10mm^2
34
​
35
r_m= 1.91
36
x_m=0
37
c_f=0
38
maxka=0.064
39
​
40
#Line 5-57 (LV-LV)
41
for i in range(4):
42
    if i%2==0:
43
        ycoord=325+shft
44
    else: 
45
        ycoord=105+shft
46
    
47
    for j in range (5):    
48
        pp.create_line_from_parameters(net,name=f'l{j+i*5}',from_bus=i+6, to_bus=63+j+5*i, length_km=np.abs(net.bus_geodata['x'][i+6]-net.bus_geodata['x'][63+j+5*i])*1.2/1000, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][i+6],net.bus_geodata['y'][i+6]),(net.bus_geodata['x'][63+j+5*i],net.bus_geodata['y'][63+j+5*i])])
49
    
50
    for j in range (2):
51
        pp.create_line_from_parameters(net,name=f'Area {i+1}',from_bus=5*i+63, to_bus=13*(i)+2*j+10, length_km=np.abs(net.bus_geodata['y'][5*i+63]-net.bus_geodata['y'][13*(i)+2*j+10])*1.2/1000, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][5*i+63],net.bus_geodata['y'][5*i+63]),(net.bus_geodata['x'][13*(i)+2*j+10],net.bus_geodata['y'][13*(i)+2*j+10])])
52
        pp.create_line_from_parameters(net,name=f'Area {i+1}',from_bus=5*i+64, to_bus=13*(i)+2*j+13, length_km=np.abs(net.bus_geodata['y'][5*i+64]-net.bus_geodata['y'][13*(i)+2*j+13])*1.2/1000, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][5*i+64],net.bus_geodata['y'][5*i+64]),(net.bus_geodata['x'][13*(i)+2*j+13],net.bus_geodata['y'][13*(i)+2*j+13])])
53
        pp.create_line_from_parameters(net,name=f'Area {i+1}',from_bus=5*i+66, to_bus=13*(i)+2*j+18, length_km=np.abs(net.bus_geodata['y'][5*i+66]-net.bus_geodata['y'][13*(i)+2*j+18])*1.2/1000, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][5*i+66],net.bus_geodata['y'][5*i+66]),(net.bus_geodata['x'][13*(i)+2*j+18],net.bus_geodata['y'][13*(i)+2*j+18])])
54
        pp.create_line_from_parameters(net,name=f'Area {i+1}',from_bus=5*i+67, to_bus=13*(i)+2*j+14, length_km=np.abs(net.bus_geodata['y'][5*i+67]-net.bus_geodata['y'][13*(i)+2*j+14])*1.2/1000, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][5*i+67],net.bus_geodata['y'][5*i+67]),(net.bus_geodata['x'][13*(i)+2*j+14],net.bus_geodata['y'][13*(i)+2*j+14])])
55
​
56
for j in range (2):
57
    for i in range (2):
58
        pp.create_line_from_parameters(net,name=f'Area {i+1}',from_bus=65+5*i, to_bus=2*j+17+13*i, length_km=np.abs(net.bus_geodata['y'][5*i+65]-net.bus_geodata['y'][13*(i)+2*j+17])*1.2/1000, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][65+5*i],net.bus_geodata['y'][65+5*i]),(net.bus_geodata['x'][13*(i)+2*j+17],net.bus_geodata['y'][13*(i)+2*j+17])])
59
        pp.create_line_from_parameters(net,name=f'Area {i+3}',from_bus=75+5*i, to_bus=13*(i)+j+47, length_km=np.abs(net.bus_geodata['y'][5*i+75]-net.bus_geodata['y'][13*(i)+j+47])*1.2/1000, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][75+5*i],net.bus_geodata['y'][75+5*i]),(net.bus_geodata['x'][13*(i)+j+47],net.bus_geodata['y'][13*(i)+j+47])])
60
        
61
        pp.create_line_from_parameters(net,name=f'Area {i+1}',from_bus=i+6, to_bus=13*i+j+21, length_km=np.abs(net.bus_geodata['y'][i+6]-net.bus_geodata['y'][13*i+j+21])*1.2/1000, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][i+6],net.bus_geodata['y'][i+6]),(net.bus_geodata['x'][13*i+j+21],net.bus_geodata['y'][13*i+j+21])])
62
        pp.create_line_from_parameters(net,name=f'Area {i+3}',from_bus=i+8, to_bus=13*i+2*j+43, length_km=np.abs(net.bus_geodata['y'][i+8]-net.bus_geodata['y'][13*i+j*2+43])*1.2/1000, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][i+8],net.bus_geodata['y'][i+8]),(net.bus_geodata['x'][13*i+j*2+43],net.bus_geodata['y'][13*i+j*2+43])])
63
​
64
    pp.create_line_from_parameters(net,name=f'Area {j+1}',from_bus=5*j+67, to_bus=13*j+11, length_km=300*1.2/1000, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][5*j+67],net.bus_geodata['y'][5*j+67]),(500,325-220*j),(net.bus_geodata['x'][13*j+11],net.bus_geodata['y'][13*j+11])])
65
    pp.create_line_from_parameters(net,name=f'Area {j+3}',from_bus=5*j+73, to_bus=13*j+37, length_km=250*1.2/1000, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(net.bus_geodata['x'][5*j+73],net.bus_geodata['y'][5*j+73]),(500,325-220*j),(net.bus_geodata['x'][13*j+37],net.bus_geodata['y'][13*j+37])])
66
​
67
    
68
pp.create_line_from_parameters(net,name=f'Area {4}',from_bus=82, to_bus=62, length_km=0.100*1.2, r_ohm_per_km = r_m, x_ohm_per_km = x_m, c_nf_per_km = c_f, max_i_ka=maxka,geodata=[(950,105),(1000,105),(1000,50)])
69
#pd.set_option('display.max_rows', 500)
70
net.line
name	std_type	from_bus	to_bus	length_km	r_ohm_per_km	x_ohm_per_km	c_nf_per_km	g_us_per_km	max_i_ka	df	parallel	type	in_service
0	None	None	1	2	0.4320	0.32	0.117	0.318	0.0	0.340	1.0	1	None	True
1	None	None	1	3	0.4320	0.32	0.117	0.318	0.0	0.340	1.0	1	None	True
2	None	None	2	4	0.6000	0.32	0.117	0.318	0.0	0.340	1.0	1	None	True
3	None	None	3	5	0.6000	0.32	0.117	0.318	0.0	0.340	1.0	1	None	True
4	l0	None	6	63	0.2400	1.91	0.000	0.000	0.0	0.064	1.0	1	None	True
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
72	Area 2	None	7	35	0.0684	1.91	0.000	0.000	0.0	0.064	1.0	1	None	True
73	Area 4	None	9	58	0.0684	1.91	0.000	0.000	0.0	0.064	1.0	1	None	True
74	Area 2	None	72	24	0.3600	1.91	0.000	0.000	0.0	0.064	1.0	1	None	True
75	Area 4	None	78	50	0.3000	1.91	0.000	0.000	0.0	0.064	1.0	1	None	True
76	Area 4	None	82	62	0.1200	1.91	0.000	0.000	0.0	0.064	1.0	1	None	True
77 rows × 14 columns

1
#Geodata for plotting line
2
#print(net.line_geodata)
3
pplot.simple_plotly(net)
4
​
1
​
1
#solve powerflow with nr
2
pp.runpp(net, algorithm='nr');
3
​
4
#store data
5
pp.to_json(net,"refugee3_withlines.json");
6
​
7
#display results of powerflow for buses
8
net.res_bus
vm_pu	va_degree	p_mw	q_mvar
0	0.900000	0.000000	0.052677	-0.021934
1	0.900573	0.246632	0.000000	0.000000
2	0.900612	0.246332	0.000000	0.000000
3	0.900613	0.246325	0.000000	0.000000
4	0.900640	0.246121	0.000000	0.000000
...	...	...	...	...
78	0.910265	0.238804	0.000000	0.000000
79	0.904923	0.403560	0.000000	0.000000
80	0.906459	0.356290	0.000000	0.000000
81	0.907990	0.309179	0.000000	0.000000
82	0.914803	0.099099	0.000000	0.000000
83 rows × 4 columns

1
#display results of powerflow on lines including max and min pu voltage
2
net.res_line
3
#np.max(net.res_bus['vm_pu'])
4
#np.min(net.res_bus['vm_pu'])
p_from_mw	q_from_mvar	p_to_mw	q_to_mvar	pl_mw	ql_mvar	i_from_ka	i_to_ka	i_ka	vm_from_pu	va_from_degree	vm_to_pu	va_to_degree	loading_percent
0	-0.026115	-0.013272	0.026116	0.013268	1.208745e-06	-3.793533e-06	0.001707	0.001707	0.001707	0.900573	0.246632	0.900612	0.246332	0.502140
1	-0.026793	-0.013604	0.026794	0.013601	1.271846e-06	-3.770467e-06	0.001751	0.001751	0.001751	0.900573	0.246632	0.900613	0.246325	0.515080
2	-0.013226	-0.006720	0.013227	0.006714	4.305036e-07	-5.725646e-06	0.000865	0.000864	0.000865	0.900612	0.246332	0.900640	0.246121	0.254295
3	-0.013904	-0.007052	0.013905	0.007047	4.754361e-07	-5.709240e-06	0.000909	0.000908	0.000909	0.900613	0.246325	0.900642	0.246105	0.267235
4	-0.002080	-0.001017	0.002098	0.001017	1.749373e-05	0.000000e+00	0.003567	0.003567	0.003567	0.903156	0.436636	0.909291	0.247776	5.572862
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
72	-0.001049	-0.000509	0.001050	0.000509	1.263298e-06	0.000000e+00	0.001795	0.001795	0.001795	0.903157	0.436629	0.904038	0.409560	2.805225
73	-0.001049	-0.000509	0.001050	0.000509	1.262674e-06	0.000000e+00	0.001795	0.001795	0.001795	0.903381	0.450991	0.904261	0.423936	2.804531
74	-0.001044	-0.000509	0.001050	0.000509	6.495950e-06	0.000000e+00	0.001775	0.001775	0.001775	0.910041	0.224337	0.914622	0.084583	2.772763
75	-0.001045	-0.000509	0.001050	0.000509	5.419648e-06	-1.084202e-19	0.001776	0.001776	0.001776	0.910265	0.238804	0.914085	0.122303	2.774391
76	-0.001048	-0.000509	0.001050	0.000509	2.157260e-06	1.084202e-19	0.001771	0.001771	0.001771	0.914803	0.099099	0.916328	0.052843	2.767600
77 rows × 14 columns

1
#import module and plot lines visually
2
from pandapower.plotting.plotly import vlevel_plotly
3
vlevel_plotly(net)
1
#output largest load percentage on lines
2
np.max(net.res_line['loading_percent'])
3
​
8.342495060715475
1
#plot houses 
2
#import libraries and modules
3
​
4
import shapely
5
import geopandas as gpd
6
import pandas as pd
7
import matplotlib.pyplot as plt
8
from shapely.geometry import Polygon
9
from shapely.geometry import LineString
10
​
11
​
12
house=list(range(0,53))
13
housename=list(range(0,53))
14
color=list(range(0,53))
15
road=list(range(0,5))
16
​
17
#create house shapes
18
for j in range(2):
19
    for i in range(7):
20
        house[i+27*j]=Polygon([(0+150*i,0+220*j),(0+150*i,100+220*j),(50+150*i,100+220*j),(50+150*i,50+220*j),(100+150*i,50+220*j),(100+150*i,0+220*j)])
21
        housename[i+27*j]=(f"House {i+1+27*j}")
22
        
23
    for i in range(6):
24
        house[i+7+27*j]=Polygon([(50+150*i,50+220*j),(50+150*i,100+220*j),(150+150*i,100+220*j),(150+150*i,0+220*j),(100+150*i,0+220*j),(100+150*i,50+220*j)])
25
        housename[i+7+27*j]=(f"House {i+8+27*j}")
26
​
27
    for i in range(7):
28
        house[i+14+26*j]=Polygon([(0+150*i,110+220*j),(0+150*i,210+220*j),(100+150*i,210+220*j),(100+150*i,160+220*j),(50+150*i,160+220*j),(50+150*i,110+220*j)])
29
        housename[i+14+26*j]=(f"House {i+15+26*j}")
30
​
31
    for i in range(6):
32
        house[i+21+26*j]=Polygon([(50+150*i,110+220*j),(50+150*i,160+220*j),(100+150*i,160+220*j),(100+150*i,210+220*j),(150+150*i,210+220*j),(150+150*i,110+220*j)])
33
        housename[i+21+26*j]=(f"House {i+22+26*j}")
34
    
35
house[13]=Polygon([(950,50),(950,100),(1050,100),(1050,0),(1000,0),(1000,50)])
36
housename[13]=(f"House {14}")
37
​
38
​
39
house[46]=Polygon([(900,330),(900,430),(1000,430),(1000,330)])
40
​
41
for i in range(3):
42
    road[i]=Polygon([(0,100+i*110),(0,110+110*i),(1000,110+110*i),(1000,100+110*i)])
43
for i in range(2):
44
    road[3+i]=Polygon([(297+300*i,0),(297+300*i,430),(303+300*i,430),(303+300*i,0)])
45
    
46
#road dataframe
47
roads = {'Type': "Road", 'geometry': road}
48
gdfroad=gpd.GeoDataFrame(roads, crs="EPSG:4326")
49
​
50
#blue houses (to differentiate groups of 3)
51
housenameblue=housename[0:7]+housename[14:21]+housename[27:34]+housename[40:47]
52
houseblue=house[0:7]+house[14:21]+house[27:34]+house[40:47]
53
bluehouses = {'Type': "House Group 2", 'geometry': houseblue}
54
​
55
#red houses (to differentiate groups of 3)
56
housenamered=housename[7:14]+housename[21:27]+housename[34:40]+housename[47:53]
57
housered=house[7:14]+house[21:27]+house[34:40]+house[47:53]
58
redhouses = {'Type': "House Group 1", 'geometry': housered}
59
​
60
#house dataframe
61
gdfred = gpd.GeoDataFrame(redhouses, crs="EPSG:4326")
62
gdfblue = gpd.GeoDataFrame(bluehouses, crs="EPSG:4326")
63
​
64
#bus dataframe
65
from shapely.geometry import Point
66
coorders=list(range(63))
67
for i in range(63):
68
    coorders[i]=Point([net.bus_geodata['x'][i],net.bus_geodata['y'][i]])
69
​
70
swingbusframe={'Type': "Swing Bus", 'geometry': coorders[0:1]}
71
gdfswingbus=gpd.GeoDataFrame(swingbusframe, crs="EPSG:4326")
72
    
73
    
74
hvbusframe={'Type': "132/11 kV Trafo", 'geometry': coorders[1:2]}
75
gdfhvbus=gpd.GeoDataFrame(hvbusframe, crs="EPSG:4326")
76
    
77
mvbusframe={'Type': "11/0.415 kV Trafo", 'geometry': coorders[2:6], 'color':'Black'}
78
gdfmvbus=gpd.GeoDataFrame(mvbusframe, crs="EPSG:4326")
79
​
80
lvbusframe={'Type': "House Connection", 'geometry': coorders[6:63]}
81
gdflvbus=gpd.GeoDataFrame(lvbusframe, crs="EPSG:4326")
82
​
83
#line dataframe
84
linecoords=list(range(77))
85
for i in range(77):
86
    linecoords[i]=LineString(net.line_geodata['coords'][i])
87
​
88
Linename=list(range(83))
89
for i in range(83):
90
    Linename[i]=f'Line'
91
    
92
from shapely.geometry import LineString
93
hvlineframe={'Type': "11 kV Line", 'geometry': linecoords[0:4]}
94
gdfhvline=gpd.GeoDataFrame(hvlineframe, crs="EPSG:4326")
95
​
96
​
97
lvlineframe0={'Type': "0.415 kV", 'geometry': linecoords[4:83]}
98
gdflvline0=gpd.GeoDataFrame(lvlineframe0, crs="EPSG:4326")
99
​
100
lvlineframe1={'Type': "0.415 kV", 'geometry': linecoords[16:30]}
101
gdflvline1=gpd.GeoDataFrame(lvlineframe1, crs="EPSG:4326")
102
​
103
lvlineframe2={'Type': "0.415 kV", 'geometry': linecoords[30:42]}
104
gdflvline2=gpd.GeoDataFrame(lvlineframe2, crs="EPSG:4326")
105
​
106
lvlineframe3={'Type': "0.415 kV", 'geometry': linecoords[42:57]}
107
gdflvline3=gpd.GeoDataFrame(lvlineframe3, crs="EPSG:4326")
108
​
109
houselines=list(range(176))
110
housenames=list(range(176))
111
​
112
#assign house names 
113
for i in range(8):
114
    for j in range(22):
115
        k=0
116
        if i>1:
117
            k=10
118
        if i>3:
119
            k=20
120
        if i>5:
121
            k=30
122
        houselines[j+22*i]=LineString([(0+50*j,0+50*i+k),(0+50*j,50+50*i+k),(50+50*j,50+50*i+k),(50+50*j,0+50*i+k)])
123
​
124
​
125
houselineframe={'Type': "House Border", 'geometry': houselines}    
126
gdfhouse=gpd.GeoDataFrame(houselineframe, crs="EPSG:4326")
127
​
128
#plot
129
​
130
plt.rcParams["figure.figsize"] = (20,10)
131
plt.rcParams["legend.fancybox"] = True
132
o=1
133
ax=gdfblue.plot(color='pink', aspect=o,zorder=0,legend=True )
134
gdfred.plot(ax=ax, color='blue', alpha=0.1,aspect=o,zorder=0, legend=True,categorical=True)
135
​
136
gdfswingbus.plot(color="Yellow", ax=ax, aspect=o, markersize=300, legend=True,categorical=True)
137
gdfhvbus.plot(ax=ax, color="Blue", aspect=o, markersize=200,zorder=3, legend=True)
138
gdfmvbus.plot(ax=ax, color="Orange", aspect=o, markersize=70,zorder=5, marker='o',legend=True)
139
gdflvbus.plot(ax=ax, color='black', aspect=o, markersize=70,zorder=4, marker='o')
140
gdfhvline.plot(ax=ax,color='orange',linewidth=3,aspect=o,zorder=2)
141
gdflvline0.plot(ax=ax,color='black',aspect=o)
142
gdflvline1.plot(ax=ax,color='black',aspect=o)
143
gdflvline2.plot(ax=ax,color='black',aspect=o)
144
gdflvline3.plot(ax=ax,color='red',aspect=o)
145
gdfhouse.plot(ax=ax,color='White',aspect=o,zorder=1,label="Sjo")
146
gdfroad.plot(ax=ax, color="black", legend=False,aspect=o,alpha=0.4,zorder=1)
<AxesSubplot:>

1
#generate and store data
2
​
3
if solar==0:
4
    pp.to_json(net, filename="NoSolar.json")
5
else:
6
    pp.to_json(net, filename="Solar.json")
7
    
8
j=0
9
​
1
#plot stored data
2
​
3
if solar==1:
4
    nosolarnet=pp.from_json("NoSolar.json")
5
    solarnet=net
6
else:
7
    solarnet=pp.from_json("Solar.json")
8
    nosolarnet=net
9
    
10
import plotly.graph_objects as go
11
​
12
housenames=list(range(53))
13
for i in range(53):
14
    housenames[i]=f"House {i+1}"
15
​
16
​
17
#plot voltages
18
fig=go.Figure(data=[
19
    go.Scatter(name='Winter - Max Load', x= housenames, y= nosolarnet.res_bus["vm_pu"][10:63],mode='markers'),
20
    #go.Scatter(name='Winter - Max Load', x= nosolarnet.bus['name'], y= nosolarnet.res_bus["vm_pu"],mode='lines'),
21
    go.Scatter(name='Summer - Max PV Generation', x= housenames, y= solarnet.res_bus["vm_pu"][10:63],mode='markers')      
22
    ])
23
​
24
fig.update_yaxes(range=[0.9, 1.06])
25
#fig.update_xaxes(range=[, 62.5])
26
​
27
fig.update_layout(
28
    autosize=False,
29
    width=500,
30
    height=500,
31
    margin=dict(
32
        l=50,
33
        r=50,
34
        b=100,
35
        t=100,
36
        pad=2
37
    ),
38
    paper_bgcolor="White",
39
)
40
​
41
fig.update_layout(
42
    legend=dict(
43
    yanchor="top",
44
    y=0.150,
45
    xanchor="left",
46
    x=0.01
47
),
48
    title="",
49
    showlegend=True,
50
    xaxis_title="Bus Number",
51
    yaxis_title="Rated Voltage",
52
  #  legend_title="Scenario",
53
    font=dict(
54
        family="Courier New, monospace",
55
        size=9,
56
        color="Black"
57
    )
58
)
59
fig.show()
60
​
1
​
1
​
1
​
1
​
1
​
1
​
1
​
1
​
1
​
1
​
1
​
1
​
1
​
1
​
1
​
